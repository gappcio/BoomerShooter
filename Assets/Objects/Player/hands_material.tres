[gd_resource type="VisualShader" load_steps=14 format=3 uid="uid://c17b8uo1g3ws"]

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_p72ns"]
constant = Color(0, 0, 0, 1)

[sub_resource type="Gradient" id="Gradient_a622q"]
offsets = PackedFloat32Array(0, 0.185501)
colors = PackedColorArray(0.637843, 0.637843, 0.637843, 1, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_p72ns"]
noise_type = 5
frequency = 0.0548
fractal_type = 3
fractal_octaves = 1
fractal_gain = 6.995
fractal_ping_pong_strength = 1.515
domain_warp_type = 2
domain_warp_frequency = 0.91
domain_warp_fractal_octaves = 10

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_2xfgb"]
generate_mipmaps = false
color_ramp = SubResource("Gradient_a622q")
noise = SubResource("FastNoiseLite_p72ns")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_sa0io"]
output_port_for_preview = 0
texture = SubResource("NoiseTexture2D_2xfgb")
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_a503j"]
input_name = "light"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_pu8ph"]
size = Vector2(600, 360)
expression = "float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
diffuse_light += clamp((shaded.rgb * LIGHT_COLOR), 0.0, 1.0);"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_a622q"]
parameter_name = "gradient"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_2xfgb"]
input_name = "normal"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_sa0io"]
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_a503j"]
constant = 0.02

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_pu8ph"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_kfbd5"]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_front, diffuse_toon, specular_toon;

uniform sampler2D tex_frg_9 : source_color;



void vertex() {
// Input:2
	vec3 n_out2p0 = NORMAL;


// FloatConstant:4
	float n_out4p0 = 0.020000;


// VectorOp:3
	vec3 n_out3p0 = n_out2p0 * vec3(n_out4p0);


// Input:6
	vec3 n_out6p0 = VERTEX;


// VectorOp:5
	vec3 n_out5p0 = n_out3p0 + n_out6p0;


// Output:0
	VERTEX = n_out5p0;


}

void fragment() {
// ColorConstant:8
	vec4 n_out8p0 = vec4(0.000000, 0.000000, 0.000000, 1.000000);


// Texture2D:9
	vec4 n_out9p0 = texture(tex_frg_9, UV);


// Output:0
	ALBEDO = vec3(n_out8p0.xyz);
	ALPHA = n_out9p0.x;


}
"
modes/cull = 1
modes/diffuse = 3
modes/specular = 1
nodes/vertex/2/node = SubResource("VisualShaderNodeInput_2xfgb")
nodes/vertex/2/position = Vector2(-740, 140)
nodes/vertex/3/node = SubResource("VisualShaderNodeVectorOp_sa0io")
nodes/vertex/3/position = Vector2(-300, 200)
nodes/vertex/4/node = SubResource("VisualShaderNodeFloatConstant_a503j")
nodes/vertex/4/position = Vector2(-700, 340)
nodes/vertex/5/node = SubResource("VisualShaderNodeVectorOp_pu8ph")
nodes/vertex/5/position = Vector2(20, 340)
nodes/vertex/6/node = SubResource("VisualShaderNodeInput_kfbd5")
nodes/vertex/6/position = Vector2(-400, 460)
nodes/vertex/connections = PackedInt32Array(2, 0, 3, 0, 4, 0, 3, 1, 3, 0, 5, 0, 5, 0, 0, 0, 6, 0, 5, 1)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_p72ns")
nodes/fragment/8/position = Vector2(-360, 200)
nodes/fragment/9/node = SubResource("VisualShaderNodeTexture_sa0io")
nodes/fragment/9/position = Vector2(-640, 380)
nodes/fragment/connections = PackedInt32Array(8, 0, 0, 0, 9, 0, 0, 1)
nodes/light/0/position = Vector2(520, 160)
nodes/light/2/node = SubResource("VisualShaderNodeInput_a503j")
nodes/light/2/position = Vector2(-660, 140)
nodes/light/3/node = SubResource("VisualShaderNodeExpression_pu8ph")
nodes/light/3/position = Vector2(-260, 120)
nodes/light/3/size = Vector2(600, 360)
nodes/light/3/input_ports = "0,4,light;1,8,color_gradient;"
nodes/light/3/output_ports = "0,4,diffuse_light;"
nodes/light/3/expression = "float dotproduct = clamp(dot(NORMAL, LIGHT), -0.9, 0.9);
float sample = clamp((dotproduct + 1.0) * ATTENUATION / 2.1, 0.05, 0.95);
vec4 shaded = texture(color_gradient, vec2(sample, 0.0));
diffuse_light += clamp((shaded.rgb * LIGHT_COLOR), 0.0, 1.0);"
nodes/light/5/node = SubResource("VisualShaderNodeTexture2DParameter_a622q")
nodes/light/5/position = Vector2(-1060, 160)
nodes/light/connections = PackedInt32Array(2, 0, 3, 0, 5, 0, 3, 1)
